<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.opsli.modulars.system.user.mapper.UserMapper">

    <!-- 数据库字段 -->
    <sql id="columns">
		a.id as id,

		a.username as username,
        a.password as password,
        a.password_level as passwordLevel,
        a.secret_key as secretKey,
        a.no as no,
        a.real_name as realName,
        a.enable as enable,
        a.mobile as mobile,
        a.email as email,
        a.avatar as avatar,
        a.login_ip as loginIp,
        a.remark as remark,
        a.tenant_id as tenantId,

        a.create_by as createBy,
        a.create_time as createTime,
        a.update_by as updateBy,
        a.update_time as updateTime,
        a.version as version,
        a.deleted as deleted
	</sql>

    <sql id="joinsColumns">
		,b.org_id as 'org.companyId',
		c.org_id as 'org.departmentId',
		d.org_id as 'org.postId'
	</sql>

    <sql id="joins">
        left join sys_user_org_ref b on b.user_id = a.id and b.org_type = '1'
        left join sys_user_org_ref c on c.user_id = a.id and c.org_type = '2'
        left join sys_user_org_ref d on d.user_id = a.id and d.org_type = '3'
	</sql>

    <select id="findList" parameterType="SysUser" resultType="SysUserAndOrg">
        select
            <include refid="columns"></include>
            <include refid="joinsColumns"></include>
        from
        sys_user a
        <include refid="joins"></include>
        ${ew.customSqlSegment}
    </select>

    <select id="queryAllPerms" resultType="String">
        select
            a.permissions
        from
        sys_menu a,
        sys_role_menu_ref b,
        sys_user_role_ref c
        where
            a.id = b.menu_id
            and a.hidden = '0'
            and a.deleted = '0'
            and b.role_id = c.role_id
            <!-- 2 表示按钮 -->
            and a.type = '2'
            and c.user_id = #{userId}
    </select>

    <select id="getRoleIdList"  resultType="String">
        select
            a.role_id
        from
        sys_user_role_ref a
        where
            a.user_id = #{userId}
    </select>

    <select id="getRoleCodeList"  resultType="String">
        select
            b.role_code
        from
        sys_user_role_ref a,
        sys_role b
        where
            a.role_id = b.id
            and a.user_id = #{userId}
    </select>

    <!--  根据用户id查询菜单列表-->
    <select id="findMenuListByUserId" resultType="SysMenu">
        select
            c.id,
            c.parent_Id,
            c.permissions,
            c.menu_name,
            c.redirect,
            c.type,
            c.icon,
            c.url,
            c.component,
            c.always_show,
            c.sort_no
        from
            sys_user_role_ref a,
            sys_role_menu_ref b,
            sys_menu c
        where
            a.role_Id = b.role_Id
            and b.menu_id = c.id
            and c.parent_id != -1
            and a.user_id = #{userId}
            <!-- 1 表示内部链接 3 表示外部链接 -->
            and c.type in ( '1', '3' )
            and c.deleted = '0'
            and c.hidden = '0'
    </select>

    <!--  根据用户id查询菜单列表-->
    <select id="findMenuAllListByUserId" resultType="SysMenu">
        select
            c.id,
            c.parent_Id,
            c.permissions,
            c.menu_name,
            c.redirect,
            c.type,
            c.icon,
            c.url,
            c.component,
            c.always_show,
            c.sort_no
        from
            sys_user_role_ref a,
            sys_role_menu_ref b,
            sys_menu c
        where
            a.role_Id = b.role_Id
            and b.menu_id = c.id
            and c.parent_id != -1
            and a.user_id = #{userId}
            and c.deleted = '0'
            and c.hidden = '0'
    </select>

    <update id="updatePassword" parameterType="org.opsli.api.wrapper.system.user.UserPassword">
        update sys_user
        set
            password = #{newPassword},
            password_level = #{passwordLevel},
            secret_key = #{salt}
        where id = #{userId}
    </update>

    <update id="updateLoginIp" parameterType="SysUser">
        update sys_user
        set
            login_ip = #{loginIp}
        where id = #{id}
    </update>

    <update id="updateAvatar" parameterType="SysUser">
        update sys_user
        set
            avatar = #{avatar}
        where id = #{id}
    </update>

</mapper>
